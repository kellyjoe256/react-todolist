{"version":3,"sources":["components/paginate.jsx","components/tasks.jsx","components/taskForm.jsx","components/Todo.jsx","serviceWorker.js","index.js","App.js"],"names":["Paginate","props","meta","onPageChange","has_previous","has_next","current_page","className","role","aria-label","href","onClick","e","preventDefault","Tasks","state","value","v","String","toUpperCase","slice","toLowerCase","moment","fromNow","format","this","tasks","onEdit","onDelete","onCompletion","length","map","task","key","_id","completed","title","ucfirst","priority","formatDate","start_date","due_date","created_at","type","onSearch","onChangeLimit","onChange","target","placeholder","onKeyUp","trim","renderTasks","total_pages","Component","TaskForm","priorityOptions","low","medium","high","field","error","errors","find","some","hasError","getError","onSubmit","autoComplete","htmlFor","id","name","displayError","Object","keys","pattern","Todo","queryParams","page","perPage","search","bind","handleChange","handleSubmit","getTasks","taskToEdit","setState","confirm","axios","delete","then","resetForm","catch","response","console","log","taskToComplete","saveTask","limit","parseInt","url","query","parseQueryParams","get","data","method","pick","headers","event","output","entries","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4513712.chunk.js","sourcesContent":["/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Paginate(props) {\n    const { meta, onPageChange } = props;\n    const { has_previous, has_next, current_page } = meta;\n\n    return (\n        <nav\n            className=\"pagination is-centered\"\n            role=\"navigation\"\n            aria-label=\"pagination\"\n        >\n            {has_previous ? (\n                <a\n                    href=\"#previous\"\n                    className=\"pagination-previous\"\n                    aria-label=\"Go to previous page\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        onPageChange(current_page - 1);\n                    }}\n                >\n                    Previous page\n                </a>\n            ) : null}\n            {has_next ? (\n                <a\n                    href=\"#next\"\n                    className=\"pagination-next\"\n                    aria-label=\"Go to next page\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        onPageChange(current_page + 1);\n                    }}\n                >\n                    Next page\n                </a>\n            ) : null}\n        </nav>\n    );\n}\n\nPaginate.propTypes = {\n    meta: PropTypes.objectOf(PropTypes.any).isRequired,\n    onPageChange: PropTypes.func.isRequired,\n};\n\nexport default Paginate;\n","/* eslint-disable no-underscore-dangle, class-methods-use-this, object-curly-newline */\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport Paginate from './paginate';\n\nclass Tasks extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    ucfirst(value) {\n        const v = String(value);\n        return v[0].toUpperCase() + v.slice(1).toLowerCase();\n    }\n\n    fromNow(value) {\n        return moment(value).fromNow();\n    }\n\n    formatDate(value) {\n        return moment(value).format('Do MMM YYYY');\n    }\n\n    renderTasks() {\n        const { tasks, onEdit, onDelete, onCompletion } = this.props;\n\n        if (tasks.length === 0) {\n            return <p>No tasks available</p>;\n        }\n\n        return (\n            <table className=\"table is-striped is-fullwidth is-narrow\">\n                <thead>\n                    <tr>\n                        <th>Task</th>\n                        <th>Priority</th>\n                        <th>Start Date</th>\n                        <th>Due Date</th>\n                        <th>Created</th>\n                        <th>&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tasks.map((task) => (\n                        <tr\n                            key={task._id}\n                            className={task.completed ? 'is-selected' : ''}\n                        >\n                            <td>{task.title}</td>\n                            <td>{this.ucfirst(task.priority)}</td>\n                            <td>{this.formatDate(task.start_date)}</td>\n                            <td>{this.formatDate(task.due_date)}</td>\n                            <td>{this.fromNow(task.created_at)}</td>\n                            <td className=\"control-buttons\">\n                                <button\n                                    type=\"button\"\n                                    className=\"button is-small is-info is-light\"\n                                    onClick={() => {\n                                        onEdit(task);\n                                    }}\n                                >\n                                    Edit\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"button is-small is-danger is-light\"\n                                    onClick={() => {\n                                        onDelete(task);\n                                    }}\n                                >\n                                    Delete\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"button is-small is-light is-success\"\n                                    onClick={() => {\n                                        onCompletion(task);\n                                    }}\n                                >\n                                    Mark as\n                                    {` ${\n                                        !task.completed\n                                            ? 'complete'\n                                            : 'incomplete'\n                                    }`}\n                                </button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { meta, onSearch, onChangeLimit, onPageChange } = this.props;\n        // prettier-ignore\n        return (\n            <>\n                <div className=\"data-controls\">\n                    <select\n                        onChange={(e) => {\n                            onChangeLimit(e.target.value);\n                        }}\n                    >\n                        <option value=\"5\">5</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"15\">15</option>\n                        <option value=\"20\">20</option>\n                        <option value=\"25\">25</option>\n                    </select>\n                    <input\n                        type=\"text\"\n                        className=\"input\"\n                        placeholder=\"Search...\"\n                        onKeyUp={(e) => {\n                            onSearch(e.target.value.trim());\n                        }}\n                    />\n                </div>\n                {this.renderTasks()}\n                {meta.total_pages > 1\n                    ? <Paginate meta={meta} onPageChange={onPageChange} />\n                    : null}\n            </>\n        );\n    }\n}\n\nTasks.propTypes = {\n    meta: PropTypes.objectOf(PropTypes.any).isRequired,\n    tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onCompletion: PropTypes.func.isRequired,\n    onSearch: PropTypes.func.isRequired,\n    onChangeLimit: PropTypes.func.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n};\n\nexport default Tasks;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TaskForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            priorityOptions: {\n                '': 'Select Priority',\n                low: 'Low',\n                medium: 'Medium',\n                high: 'High',\n            },\n        };\n    }\n\n    getError(field) {\n        const { errors } = this.props;\n        const error = errors.find((e) => e[field]);\n        if (error) {\n            return error[field];\n        }\n\n        return null;\n    }\n\n    hasError(field) {\n        const { errors } = this.props;\n\n        return errors.some((error) => error[field]);\n    }\n\n    displayError(field) {\n        if (!this.hasError(field)) {\n            return null;\n        }\n\n        return <p className=\"help is-danger\">{this.getError(field)}</p>;\n    }\n\n    render() {\n        const { priorityOptions } = this.state;\n        const { task, onChange, onSubmit } = this.props;\n\n        // prettier-ignore\n        return (\n            <form autoComplete=\"off\" onSubmit={onSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\" htmlFor=\"title\">\n                        Task / Title\n                    </label>\n                    <div className=\"control\">\n                        <input\n                            type=\"text\"\n                            id=\"title\"\n                            name=\"title\"\n                            placeholder=\"Task\"\n                            value={task.title}\n                            onChange={onChange}\n                            className={`input${\n                                this.hasError('title') ? ' is-danger' : ''\n                            }`}\n                        />\n                        {this.displayError('title')}\n                    </div>\n                </div>\n                <div className=\"field\">\n                    <label className=\"label\" htmlFor=\"priority\">\n                        Priority\n                    </label>\n                    <div className=\"control\">\n                        <div\n                            className={`select is-fullwidth${\n                                this.hasError('priority') ? ' is-danger' : ''\n                            }`}\n                        >\n                            <select\n                                id=\"priority\"\n                                name=\"priority\"\n                                value={task.priority}\n                                onChange={onChange}\n                            >\n                                {Object.keys(priorityOptions).map((key) => (\n                                    <option key={key} value={key}>\n                                        {priorityOptions[key]}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        {this.displayError('priority')}\n                    </div>\n                </div>\n                <div className=\"field\">\n                    <label className=\"label\" htmlFor=\"start_date\">\n                        Start Date\n                    </label>\n                    <div className=\"control\">\n                        <input\n                            type=\"text\"\n                            id=\"start_date\"\n                            name=\"start_date\"\n                            pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n                            placeholder=\"YYYY-MM-DD\"\n                            value={task.start_date}\n                            onChange={onChange}\n                            className={`input${\n                                this.hasError('start_date') ? ' is-danger' : ''\n                            }`}\n                        />\n                        {this.displayError('start_date')}\n                    </div>\n                </div>\n                <div className=\"field\">\n                    <label className=\"label\" htmlFor=\"due_date\">\n                        Due Date\n                    </label>\n                    <div className=\"control\">\n                        <input\n                            type=\"text\"\n                            id=\"due_date\"\n                            name=\"due_date\"\n                            pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n                            placeholder=\"YYYY-MM-DD\"\n                            value={task.due_date}\n                            onChange={onChange}\n                            className={`input${\n                                this.hasError('due_date') ? ' is-danger' : ''\n                            }`}\n                        />\n                        {this.displayError('due_date')}\n                    </div>\n                </div>\n                <div className=\"field\">\n                    <div className=\"control\">\n                        <button type=\"submit\" className=\"button is-link\">\n                            Submit\n                        </button>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nTaskForm.propTypes = {\n    task: PropTypes.objectOf(PropTypes.any).isRequired,\n    errors: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n};\n\nexport default TaskForm;\n","/* eslint-disable no-param-reassign, object-curly-newline, no-underscore-dangle */\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport pick from 'lodash.pick';\nimport Tasks from './tasks';\nimport TaskForm from './taskForm';\n\nexport default class Todo extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            meta: {},\n            task: {\n                title: '',\n                priority: '',\n                start_date: '',\n                due_date: '',\n            },\n            tasks: [],\n            errors: [],\n            queryParams: {\n                page: 1,\n                perPage: 5,\n                search: '',\n            },\n        };\n\n        this.onEdit = this.onEdit.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n        this.onCompletion = this.onCompletion.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.onSearch = this.onSearch.bind(this);\n        this.onChangeLimit = this.onChangeLimit.bind(this);\n        this.onPageChange = this.onPageChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.getTasks();\n    }\n\n    onEdit(task) {\n        const taskToEdit = { ...task };\n        taskToEdit.due_date = moment(task.due_date).format('YYYY-MM-DD');\n        taskToEdit.start_date = moment(task.start_date).format('YYYY-MM-DD');\n\n        this.setState({ task: taskToEdit });\n    }\n\n    onDelete(task) {\n        /* eslint-disable-next-line */\n        if (!confirm('Are you sure?')) {\n            return;\n        }\n\n        axios\n            .delete(`tasks/${task._id}`)\n            .then(() => {\n                this.resetForm();\n                this.getTasks();\n            })\n            .catch(({ response }) => {\n                console.log(response);\n            });\n    }\n\n    onCompletion(task) {\n        const taskToComplete = { ...task };\n        taskToComplete.completed = !taskToComplete.completed;\n\n        this.saveTask(taskToComplete);\n    }\n\n    onSearch(value) {\n        const { queryParams } = this.state;\n\n        queryParams.page = 1;\n        queryParams.search = value;\n        this.setState({ queryParams });\n\n        this.getTasks();\n    }\n\n    onChangeLimit(limit) {\n        const { queryParams } = this.state;\n\n        queryParams.page = 1;\n        queryParams.perPage = parseInt(limit, 10);\n        this.setState({ queryParams });\n\n        this.getTasks();\n    }\n\n    onPageChange(page) {\n        const { queryParams } = this.state;\n\n        queryParams.page = parseInt(page, 10);\n        this.setState({ queryParams });\n\n        this.getTasks();\n    }\n\n    getTasks() {\n        let url = 'tasks';\n        const query = this.parseQueryParams();\n        if (query) {\n            url = `${url}?${query}`;\n        }\n\n        axios\n            .get(url)\n            .then(({ data }) => {\n                this.setState({\n                    meta: data.meta,\n                    tasks: data.data,\n                });\n            })\n            .catch((error) => console.log(error));\n    }\n\n    resetForm() {\n        this.setState({\n            task: {\n                title: '',\n                priority: '',\n                start_date: '',\n                due_date: '',\n            },\n            errors: [],\n        });\n    }\n\n    saveTask(task) {\n        const method = task._id ? 'PUT' : 'POST';\n        const url = task._id ? `tasks/${task._id}` : 'tasks';\n        const fields = [\n            'title',\n            'priority',\n            'completed',\n            'start_date',\n            'due_date',\n        ];\n\n        axios({\n            url,\n            method,\n            data: pick(task, fields),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then(() => {\n                this.resetForm();\n                this.getTasks();\n            })\n            .catch(({ response }) => {\n                this.setState({ errors: response.data });\n            });\n    }\n\n    handleChange({ target }) {\n        const { task } = this.state;\n        task[target.name] = target.value;\n\n        this.setState({ task });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const { task } = this.state;\n\n        this.saveTask(task);\n    }\n\n    parseQueryParams() {\n        let output = '';\n        const { queryParams } = this.state;\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const [key, value] of Object.entries(queryParams)) {\n            if (value) {\n                output += output ? `&${key}=${value}` : `${key}=${value}`;\n            }\n        }\n\n        return output;\n    }\n\n    render() {\n        const { meta, task, tasks, errors } = this.state;\n\n        return (\n            <div className=\"container is-fluid\">\n                <div className=\"columns\">\n                    <div className=\"column is-one-third\">\n                        <h1>Create / Update Task</h1>\n                        <TaskForm\n                            task={task}\n                            errors={errors}\n                            onChange={this.handleChange}\n                            onSubmit={this.handleSubmit}\n                        />\n                    </div>\n                    <div className=\"column\">\n                        <h1>Tasks</h1>\n                        <Tasks\n                            meta={meta}\n                            tasks={tasks}\n                            onEdit={this.onEdit}\n                            onDelete={this.onDelete}\n                            onCompletion={this.onCompletion}\n                            onSearch={this.onSearch}\n                            onChangeLimit={this.onChangeLimit}\n                            onPageChange={this.onPageChange}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\naxios.defaults.baseURL = 'https://mayatsa-todolist.herokuapp.com/api';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Todo from './components/Todo';\n\nexport default function App() {\n    return <Todo />;\n}\n"],"sourceRoot":""}